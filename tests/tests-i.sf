;; Coverage tests
;;(load source "helpers.qa2")
#fload "../lib/libs.sf"
#fload "helpers.sf"

(SECTION 'Qa2 'code 'coverage) ;;;;;;;;;;;;;;;;;;
#;(test '3+4i
      '3+4i
      3+4i)
;;(test {foo 1 2 'a}
;;      '{foo 1 2 'a}
;;      (variant 'foo 1 2 'a))

(test (+ #xff 1)
      '(+ #xff 1)
      256)

(test (* 100 1e-2)
      1
      1)

;; check that keywords are properly handled
(define check-cond
  (let ([else 'in-the-else])
    (lambda (x)
      (cond
       [(= x 1) 'one]
       [(= x 2) 'two]
       [else]))))
(for-each (lambda (x y)
            (test (check-cond x)
                  (list 'check-cond x)
                  y))
          '(1 2 4)
          '(one two in-the-else))

(define check-cond-2
  (let ()
    (lambda (x)
      (cond
       [(= x 1) 'one]
       [(= x 2) 'two]
       [(> x 5) => (lambda (y) (cons x y))]
       [#t car x]))))
(for-each (lambda (x y)
            (test (check-cond-2 x)
                  (list 'check-cond-2 x)
                  y))
          '(1 2 10 4)
          '(one two (10 . #t) 4))

(define check-cond-3
  (let ()
    (lambda (x)
      (cond
       [(= x 1) 'one]
       [(= x 2) 'two]
       [(> x 5) => (lambda (y) (cons x y))]))))
(for-each (lambda (x y)
            (test (check-cond-3 x)
                  (list 'check-cond-3 x)
                  y))
          '(1 2 10 4)
          '(one two (10 . #t) unspecified))


;; when and unless
#;(test (when (= (+ 2 3) 5) (cons 1 2))
      '(when (= (+ 2 3) 5) (cons 1 2))
      '(1 . 2))

#;(test (when (= (+ 2 3) 6) (cons 1 2))
      '(when (= (+ 2 3) 6) (cons 1 2))
      'unspecified)

#;(test (unless (= (+ 2 3) 5) (cons 1 2))
      '(unless (= (+ 2 3) 5) (cons 1 2))
      'unspecified)

#;(test (unless (= (+ 2 3) 6) (cons 1 2))
      '(unless (= (+ 2 3) 6) (cons 1 2))
      '(1 . 2))
            

;; We allow empty begins
#;(test (begin)
      '(begin)
      'unspecified)

(SECTION 'Qa2 'case 'handling) ;;;;;;;;;;;;;;;;;;
(let ()
  (define (check-case n)
    (case (+ n 1)
      [(1 3 5) 'even]
      [(0 2 4) 'odd]
      [(10 11 12 13) => (lambda (y) (list 'large y n))]
      [else 'other]))
  (for-each (lambda (x y)
              (test (check-case x)
                    (list 'check-case x)
                    y))
            '(1 2 4 5 6 7 10 20 30)
            '(odd even even other other other (large 11 10) other other)))
  
(let ()
  (define (check-case-2 n)
    (case (+ n 1)
      [(1 3 5) 'even]
      [(0 2 4) 'odd]
      [(10 11 12 13) => (lambda (y) (list 'large y n))]
      [else => -]))
  (for-each (lambda (x y)
              (test (check-case-2 x)
                    (list 'check-case-2 x)
                    y))
            '(1 2 4 5 6 7 10 20 30)
            '(odd even even -6 -7 -8 (large 11 10) -21 -31)))

(let ()
  (define (check-case-3 n)
    (case (+ n 1)
      [(1 3 5) 'even]
      [(0 2 4) 'odd]
      [(10 11 12 13) => (lambda (y) (list 'large y n))]))
  (for-each (lambda (x y)
              (test (check-case-3 x)
                    (list 'check-case-3 x)
                    y))
            '(1 2 4 5 6 7 10 20 30)
            '(odd even even unspecified unspecified unspecified (large 11 10)
                  unspecified unspecified)))

(let ()
  (define (check-case-4 n)
    (case (+ n 1)
      [(1 3 5) 'even]
      [(0 2 4) 'odd]
      [(10 11 12 13) (list 'large n)]))
  (for-each (lambda (x y)
              (test (check-case-4 x)
                    (list 'check-case-4 x)
                    y))
            '(1 2 4 5 6 7 10 20 30)
            '(odd even even unspecified unspecified unspecified (large 10)
                  unspecified unspecified)))

;; overwriting a macros should be allowed:
(define cond "abse")
(test cond
      'cond
      "abse" "overwritten cond")


(SECTION 'Qa2 'lists) ;;;;;;;;;;;;;;;;;;;;;;
(test (list? '())
      '(list? '())
      #t)
(test (list? list?)
      '(list? list?)
      #f)
(test (list? '(a b . c))
      '(list? '(a b . c))
      #f)
(test (reverse '())
      '(reverse '())
      '())

(test (list-tail '(1 2 3 4 5) 3)
      '(list-tail '(1 2 3 4 5) 3)
      '(4 5))


(SECTION 'Qa2 'procedures) ;;;;;;;;;;;;;;;;;;;;;;
(test (procedure? list)
      '(procedure? list)
      #t)

(SECTION 'Qa2 'equivalence 'preducates) ;;;;;;;;;;;;;;;;;;;;;;
(test (eq? #t #t)
      '(eq? #t #t)
      #t)

(test (eqv? #t #f)
      '(eqv? #t #f)
      #f)

(test (equal? '(a v) '(x y))
      '(equal? '(a v) '(x y))
      #f)

(test (equal? '#(1 2 3) '#(1 5 4))
      '(equal? '#(1 2 3) '#(1 5 4))
      #f)

(test (equal? '#(1 2 3) '#(1 5))
      '(equal? '#(1 2 3) '#(1 5))
      #f)

(SECTION 'Qa2 'numbers) ;;;;;;;;;;;;;;;;;;;;;;;;;
(test (real-part (! "47"))
      '(real-part (! "47"))
      47)

(test (imag-part (! "4"))
      '(imag-part (! "4"))
      0)

(test (string? (get-environment-variable "HOME"))
      '(string? (get-environment-variable "HOME"))
      #t)
(test (get-environment-variable "3765b84686784f13bb620d965fa325bd1546b344")
      '(get-environment-variable "3765b84686784f13bb620d965fa325bd1546b344")
      #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (main argv) (report-errors))
