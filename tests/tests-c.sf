;;(load source "helpers.qa2")
#fload "../lib/libs.sf"
#fload "helpers.sf"


(SECTION 6 3 5) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(test (string? "The word \"recursion\\\" has many meanings.")
      '(string? "The word \"recursion\\\" has many meanings.")
      '#t)
(test (string? "")
      '(string? "")
      '#t)

(test (string-length "abc")
      '(string-length "abc")
      '3)
(test (string-length "")
      '(string-length "")
      '0)

(test (string=? "" "")
      '(string=? "" "")
      '#t)
(test (string<? "" "")
      '(string<? "" "")
      '#f)
(test (string>? "" "")
      '(string>? "" "")
      '#f)
(test (string<=? "" "")
      '(string<=? "" "")
      '#t)
(test (string>=? "" "")
      '(string>=? "" "")
      '#t)

(test (string=? "A" "B")
      '(string=? "A" "B")
      '#f)
(test (string=? "a" "b")
      '(string=? "a" "b")
      '#f)
(test (string=? "9" "0")
      '(string=? "9" "0")
      '#f)
(test (string=? "A" "A")
      '(string=? "A" "A")
      '#t)

(test (string<? "A" "B")
      '(string<? "A" "B")
      '#t)
(test (string<? "a" "b")
      '(string<? "a" "b")
      '#t)
(test (string<? "9" "0")
      '(string<? "9" "0")
      '#f)
(test (string<? "A" "A")
      '(string<? "A" "A")
      '#f)

(test (string>? "A" "B")
      '(string>? "A" "B")
      '#f)
(test (string>? "a" "b")
      '(string>? "a" "b")
      '#f)
(test (string>? "9" "0")
      '(string>? "9" "0")
      '#t)
(test (string>? "A" "A")
      '(string>? "A" "A")
      '#f)

(test (string<=? "A" "B")
      '(string<=? "A" "B")
      '#t)
(test (string<=? "a" "b")
      '(string<=? "a" "b")
      '#t)
(test (string<=? "9" "0")
      '(string<=? "9" "0")
      '#f)
(test (string<=? "A" "A")
      '(string<=? "A" "A")
      '#t)

(test (string>=? "A" "B")
      '(string>=? "A" "B")
      '#f)
(test (string>=? "a" "b")
      '(string>=? "a" "b")
      '#f)
(test (string>=? "9" "0")
      '(string>=? "9" "0")
      '#t)
(test (string>=? "A" "A")
      '(string>=? "A" "A")
      '#t)

(test (string<? "abcd" "abcz")
      '(string<? "abcd" "abcz")
      '#t)
(test (string<=? "abcd" "abcz")
      '(string<=? "abcd" "abcz")
      '#t)
(test (string<? "abcd" "abcd")
      '(string<? "abcd" "abcd")
      '#f)
(test (string<=? "abcd" "abcd")
      '(string<=? "abcd" "abcd")
      '#t)
(test (string<? "abc" "abcz")
      '(string<? "abc" "abcz")
      '#t)
(test (string<=? "abc" "abcz")
      '(string<=? "abc" "abcz")
      '#t)
(test (string>=? "abd" "abcz")
      '(string>=? "abd" "abcz")
      '#t)
(test (string<? "" "abcz")
      '(string<? "" "abcz")
      '#t)
(test (string<=? "" "abcz")
      '(string<=? "" "abcz")
      '#t)
(test (string>=? "" "abcz")
      '(string>=? "" "abcz")
      '#f)

;; reversing arg order:
(test (string<? "abcz" "abcd")
      '(string<? "abcz" "abcd")
      '#f)
(test (string<=? "abcz" "abcd")
      '(string<=? "abcz" "abcd")
      '#f)
(test (string<? "abcd" "abcd")
      '(string<? "abcd" "abcd")
      '#f)
(test (string<=? "abcd" "abcd")
      '(string<=? "abcd" "abcd")
      '#t)
(test (string<? "abcz" "abc")
      '(string<? "abcz" "abc")
      '#f)
(test (string<=? "abcz" "abc")
      '(string<=? "abcz" "abc")
      '#f)
(test (string>=? "abcz" "abd")
      '(string>=? "abcz" "abd")
      '#f)
(test (string<? "abcz" "")
      '(string<? "abcz" "")
      '#f)
(test (string<=? "abcz" "")
      '(string<=? "abcz" "")
      '#f)
(test (string>=? "abcz" "")
      '(string>=? "abcz" "")
      '#t)


(test (substring "ab" 0 0)
      '(substring "ab" 0 0)
      '"")
(test (substring "ab" 1 1)
      '(substring "ab" 1 1)
      '"")
(test (substring "ab" 2 2)
      '(substring "ab" 2 2)
      '"")
(test (substring "ab" 0 1)
      '(substring "ab" 0 1)
      '"a")
(test (substring "ab" 1 2)
      '(substring "ab" 1 2)
      '"b")
(test (substring "ab" 0 2)
      '(substring "ab" 0 2)
      '"ab")

(test (string-append)
      '(string-append)
      '"")
(test (string-append "foo")
      '(string-append "foo")
      '"foo")
(test (string-append "foo" "bar")
      '(string-append "foo" "bar")
      '"foobar")
(test (string-append "foo" "bar" "baz")
      '(string-append "foo" "bar" "baz")
      '"foobarbaz")
(test (string-append "foo" "")
      '(string-append "foo" "")
      '"foo")
(test (string-append "" "foo")
      '(string-append "" "foo")
      '"foo")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (main argv) (report-errors))
