;;(load source "helpers.qa2")
#fload "../lib/libs.sf"
#fload "helpers.sf"


(SECTION 5 2 1) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define add3 (lambda (x) (+ x 3)))
(test (add3 3)
      '(add3 3)
      '6)
(define first car)
(test (first '(1 2))
      '(first '(1 2))
      '1)

(define primitive-+ +)
(define + (lambda (x y) (list y x)))
(define add3 (lambda (x) (+ x 3)))
(test (add3 6)
      '(add3 6)
      '(3 6) "test of redefinition of a primitive")
(set! + primitive-+)
(test (add3 6)
      '(add3 6)
      '9)

(SECTION 5 2 2) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(test (let ((x 5))
        (letrec ((foo (lambda (y) (bar x y)))
                 (bar (lambda (a b) (+ (* a b) a))))
          (foo (+ x 3))))
      '(let ((x 5))
         (letrec ((foo (lambda (y) (bar x y)))
                  (bar (lambda (a b) (+ (* a b) a))))
           (foo (+ x 3))))
      '45)

(SECTION 6 1) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(test (eqv? 'a 'a)
      '(eqv? 'a 'a)
      '#t)
(test (eqv? 'a 'b)
      '(eqv? 'a 'b)
      '#f)
(test (eqv? 2 2)
      '(eqv? 2 2)
      '#t)
(test (eqv? '() '())
      '(eqv? '() '())
      '#t)
(test (eqv? '10000 '10000)
      '(eqv? '10000 '10000)
      '#t)
(test (eqv? (cons 1 2) (cons 1 2))
      '(eqv? (cons 1 2) (cons 1 2))
      '#f)
(test (eqv? (lambda () 1) (lambda () 2))
      '(eqv? (lambda () 1) (lambda () 2))
      '#f)
(test (eqv? #f 'nil)
      '(eqv? #f 'nil)
      '#f)
(test (eqv? #f '())
      '(eqv? #f '())
      '#f)
(test (eqv? '() 'nil)
      '(eqv? '() 'nil)
      '#f)
(let ((p (lambda (x) x)))
  (test (eqv? p p)
        '(eqv? p p)
        '#t))
(define (gen-counter)
  (let ((n 0))
    (lambda () (set! n (+ n 1)) n)))
(let ((g (gen-counter))) 
  (test (eqv? g g)
        '(eqv? g g)
        '#t))
(test (eqv? (gen-counter) (gen-counter))
      '(eqv? (gen-counter) (gen-counter))
      '#f)
(letrec ((f (lambda () (if (eqv? f g) 'f 'both)))
         (g (lambda () (if (eqv? f g) 'g 'both))))
  (test (eqv? f g)
        '(eqv? f g)
        '#f))

(test (eq? 'a 'a)
      '(eq? 'a 'a)
      '#t)
(test (eq? (list 'a) (list 'a))
      '(eq? (list 'a) (list 'a))
      '#f)
(test (eq? '() '())
      '(eq? '() '())
      '#t)
(test (eq? '() #f)
      '(eq? '() #f)
      '#f)
(test (eq? car car)
      '(eq? car car)
      '#t)
(let ((x '(a))) (test (eq? x x)
                      '(eq? x x)
                      '#t))
(let ((x '#())) (test (eq? x x)
                      '(eq? x x)
                      '#t))
(let ((x (lambda (x) x))) (test (eq? x x)
                                '(eq? x x)
                                '#t))
(let ((p (lambda (x) x)))
  (test (eq? p p)
        '(eq? p p)
        '#t))

(test (equal? 'a 'a)
      '(equal? 'a 'a)
      '#t)
(test (equal? '(a) '(a))
      '(equal? '(a) '(a))
      '#t)
(test (equal? '(a (b) c) '(a (b) c))
      '(equal? '(a (b) c) '(a (b) c))
      '#t)
(test (equal? "abc" "abc")
      '(equal? "abc" "abc")
      '#t)
(test (equal? 2 2)
      '(equal? 2 2)
      '#t)
(test (equal? (make-vector 5 'a) (make-vector 5 'a))
      '(equal? (make-vector 5 'a) (make-vector 5 'a))
      '#t)

(test (equal? 'a 'a)
      '(equal? 'a 'a)
      '#t)
(test (equal? 'a '())
      '(equal? 'a '())
      '#f)
(test (equal? "a" "A")
      '(equal? "a" "A")
      '#f)


(SECTION 6 2 5) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(test (number? 3)
      '(number? 3)
      '#t)
(test (complex? 3)
      '(complex? 3)
      '#t)
(test (real? 3)
      '(real? 3)
      '#t)
(test (rational? 3)
      '(rational? 3)
      '#t)
(test (integer? 3)
      '(integer? 3)
      '#t)
(test (integer? (! "3.0"))
      '(integer? (! "3.0"))
      '#t)

;;; This is SFC-specific
(test (complex? (! "3+4i"))
      '(complex? (! "3+4i"))
      '#f)
(test (real? (! "-2.5+0.0i"))
      '(real? (! "-2.5+0.0i"))
      '#f)
(test (real? (! "#e1e40"))
      '(real? (! "#e1e40"))
      '#f)
(test (real? (! "#e1e-40"))
      '(real? (! "#e1e-40"))
      '#f)
(test (rational? (! "6/10"))
      '(rational? (! "6/10"))
      '#f)
(test (integer? (! "3+0i"))
      '(integer? (! "3+0i"))
      '#f)
(test (integer? (! "8/4"))
      '(integer? (! "8/4"))
      '#f)

(test (exact? 3)
      '(exact? 3)
      '#t)
#;(test (inexact? 3)
      '(inexact? 3)
      '#f)

#;(test (inexact? (! "3.9"))
'(inexact? (! "3.9"))
'#t)
#;(test (inexact? (max (! "3.9") 4))
'(inexact? (max (! "3.9") 4))
'#t)
(test (max (! "3.9") 4)
      '(max (! "3.9") 4)
      '(! "4.0"))
#;(test (exact->inexact 4)
'(exact->inexact 4)
'(! "4.0"))
(test (round (- (! "4.5")))
      '(round (- (! "4.5")))
      '(! "-4.0"))
(test (round (- (! "3.5")))
      '(round (- (! "3.5")))
      '(! "-4.0"))
(test (round (- (! "3.9")))
      '(round (- (! "3.9")))
      '(! "-4.0"))
(test (round (! "0.0"))
      '(round (! "0.0"))
      '(! "0.0"))
(test (round (! ".25"))
      '(round (! ".25"))
      '(! "0.0"))
(test (round (! "0.8"))
      '(round (! "0.8"))
      '(! "1.0"))
(test (round (! "3.5"))
      '(round (! "3.5"))
      '(! "4.0"))
(test (round (! "4.5"))
      '(round (! "4.5"))
      '(! "4.0"))

(test (let ((x (! "4195835.0"))
            (y (! "3145727.0")))
        (> (! "1.0") (- x (* (/ x y) y))))
      '(let ((x (! "4195835.0"))
             (y (! "3145727.0")))
         (> (! "1.0") (- x (* (/ x y) y))))
      '#t "Pentium fp bug")

(test (= 22 22 22)
      '(= 22 22 22)
      '#t)
(test (= 22 22)
      '(= 22 22)
      '#t)
(test (= 34 34 35)
      '(= 34 34 35)
      '#f)
(test (= 34 35)
      '(= 34 35)
      '#f)
(test (> 3 -6246)
      '(> 3 -6246)
      '#t)
(test (> 9 9 -2424)
      '(> 9 9 -2424)
      '#f)
(test (>= 3 -4 -6246)
      '(>= 3 -4 -6246)
      '#t)
(test (>= 9 9)
      '(>= 9 9)
      '#t)
(test (>= 8 9)
      '(>= 8 9)
      '#f)
(test (< -1 2 3 4 5 6 7 8)
      '(< -1 2 3 4 5 6 7 8)
      '#t)
(test (< -1 2 3 4 4 5 6 7)
      '(< -1 2 3 4 4 5 6 7)
      '#f)
(test (<= -1 2 3 4 5 6 7 8)
      '(<= -1 2 3 4 5 6 7 8)
      '#t)
(test (<= -1 2 3 4 4 5 6 7)
      '(<= -1 2 3 4 4 5 6 7)
      '#t)
(test (< 1 3 2)
      '(< 1 3 2)
      '#f)
(test (>= 1 3 2)
      '(>= 1 3 2)
      '#f)

(test (zero? 0)
      '(zero? 0)
      '#t)
(test (zero? 1)
      '(zero? 1)
      '#f)
(test (zero? -1)
      '(zero? -1)
      '#f)
(test (zero? -100)
      '(zero? -100)
      '#f)
(test (positive? 4)
      '(positive? 4)
      '#t)
(test (positive? -4)
      '(positive? -4)
      '#f)
(test (positive? 0)
      '(positive? 0)
      '#f)
(test (negative? 4)
      '(negative? 4)
      '#f)
(test (negative? -4)
      '(negative? -4)
      '#t)
(test (negative? 0)
      '(negative? 0)
      '#f)
(test (odd? 3)
      '(odd? 3)
      '#t)
(test (odd? 2)
      '(odd? 2)
      '#f)
(test (odd? -4)
      '(odd? -4)
      '#f)
(test (odd? -1)
      '(odd? -1)
      '#t)
(test (even? 3)
      '(even? 3)
      '#f)
(test (even? 2)
      '(even? 2)
      '#t)
(test (even? -4)
      '(even? -4)
      '#t)
(test (even? -1)
      '(even? -1)
      '#f)

(test (max 34 5 7 38 6)
      '(max 34 5 7 38 6)
      '38)
(test (min 3 5 5 330 4 -24)
      '(min 3 5 5 330 4 -24)
      '-24)
(test (max 3 4)
      '(max 3 4)
      '4)
(test (max (! "3.9") 4)
      '(max (! "3.9") 4)
      '(! "4.0"))

(test (+ 3 4)
      '(+ 3 4)
      '7)
(test (+ 3)
      '(+ 3)
      '3)
(test (+)
      '(+)
      '0)
(test (* 4)
      '(* 4)
      '4)
(test (*)
      '(*)
      '1)

(test (- 3 4)
      '(- 3 4)
      '-1)
(test (- 3 4 5)
      '(- 3 4 5)
      '-6)
(test (- 3)
      '(- 3)
      '-3)
(test (/ 60 4 5)
      '(/ 60 4 5)
      '3)
(test (* 4 (/ 4))
      '(* 4 (/ 4))
      '1)

(test (abs -7)
      '(abs -7)
      '7)
(test (abs 7)
      '(abs 7)
      '7)
(test (abs 0)
      '(abs 0)
      '0)

(test (modulo 13 4)
      '(modulo 13 4)
      '1)
(test (remainder 13 4)
      '(remainder 13 4)
      '1)

(test (modulo -13 4)
      '(modulo -13 4)
      '3)
(test (remainder -13 4)
      '(remainder -13 4)
      '-1)

(test (modulo 13 -4)
      '(modulo 13 -4)
      '-3)
(test (remainder 13 -4)
      '(remainder 13 -4)
      '1)

(test (modulo -13 -4)
      '(modulo -13 -4)
      '-1)
(test (remainder -13 -4)
      '(remainder -13 -4)
      '-1)

(test (remainder -13 (! "-4.0"))
      '(remainder -13 (! "-4.0"))
      '(! "-1.0"))

(test (quotient 35 7)
      '(quotient 35 7)
      '5)
(test (quotient -35 7)
      '(quotient -35 7)
      '-5)
(test (quotient 35 -7)
      '(quotient 35 -7)
      '-5)
(test (quotient -35 -7)
      '(quotient -35 -7)
      '5)

(define (divtest n1 n2)
  (= n1 (+ (* n2 (quotient n1 n2))
           (remainder n1 n2))))
(test (divtest 238 9)
      '(divtest 238 9)
      '#t)
(test (divtest -238 9)
      '(divtest -238 9)
      '#t)
(test (divtest 238 -9)
      '(divtest 238 -9)
      '#t)
(test (divtest -238 -9)
      '(divtest -238 -9)
      '#t)

;;(test (string->number "18446744073709551616")
;;      '(string->number "18446744073709551616")
;;      '18446744073709551616)
;;(test (number->string 18446744073709551616)
;;      '(number->string 18446744073709551616)
;;      '"18446744073709551616")
(test (modulo 3333333 3)
      '(modulo 3333333 3)
      '0)
(test (modulo 3333333 -3)
      '(modulo 3333333 -3)
      '0)
(test (remainder 3333333 3)
      '(remainder 3333333 3)
      '0)
(test (remainder 3333333 -3)
      '(remainder 3333333 -3)
      '0)
(test (modulo 3333332 3)
      '(modulo 3333332 3)
      '2)
(test (modulo 3333332 -3)
      '(modulo 3333332 -3)
      '-1)
(test (remainder 3333332 3)
      '(remainder 3333332 3)
      '2)
(test (remainder 3333332 -3)
      '(remainder 3333332 -3)
      '2)
(test (modulo -3333332 3)
      '(modulo -3333332 3)
      '1)
(test (modulo -3333332 -3)
      '(modulo -3333332 -3)
      '-2)
(test (remainder -3333332 3)
      '(remainder -3333332 3)
      '-2)
(test (remainder -3333332 -3)
      '(remainder -3333332 -3)
      '-2)

(test (modulo 3 3333333)
      '(modulo 3 3333333)
      '3)
(test (modulo -3 3333333)
      '(modulo -3 3333333)
      '3333330)
(test (remainder 3 3333333)
      '(remainder 3 3333333)
      '3)
(test (remainder -3 3333333)
      '(remainder -3 3333333)
      '-3)
(test (modulo 3 -3333333)
      '(modulo 3 -3333333)
      '-3333330)
(test (modulo -3 -3333333)
      '(modulo -3 -3333333)
      '-3)
(test (remainder 3 -3333333)
      '(remainder 3 -3333333)
      '3)
(test (remainder -3 -3333333)
      '(remainder -3 -3333333)
      '-3)

;;(test (modulo -2177452800 86400)
;;      '(modulo -2177452800 86400)
;;      '0)
;;(test (modulo 2177452800 -86400)
;;      '(modulo 2177452800 -86400)
;;      '0)
;;(test (modulo 2177452800 86400)
;;      '(modulo 2177452800 86400)
;;      '0)
;;(test (modulo -2177452800 -86400)
;;      '(modulo -2177452800 -86400)
;;      '0)
;;(test (divtest 281474976710655 65535)
;;      '(divtest 281474976710655 65535)
;;      '#t)
;;(test (divtest 281474976710654 65535)
;;      '(divtest 281474976710654 65535)
;;      '#t)

#;(test (gcd 32 -36)
'(gcd 32 -36)
'4)
#;(test (gcd)
'(gcd)
'0)
#;(test (lcm 32 -36)
'(lcm 32 -36)
'288)
#;(test (lcm (! "32.0") -36)
'(lcm (! "32.0") -36)
'(! "288.0"))
#;(test (lcm)
'(lcm)
'1)

#;(test (gcd 0 4)
'(gcd 0 4)
'4)
#;(test (gcd -4 0)
'(gcd -4 0)
'4)

;;(test (numerator (/ 6 4))
;;      '(numerator (/ 6 4))
;;      '3)
;;(test (denominator (/ 6 4))
;;      '(denominator (/ 6 4))
;;      '2)
#;(test (denominator (exact->inexact (/ 6 4)))
      '(denominator (exact->inexact (/ 6 4)))
      '(! "2.0"))

(test (floor (! "-4.3"))
      '(floor (! "-4.3"))
      '(! "-5.0"))
(test (ceiling (! "-4.3"))
      '(ceiling (! "-4.3"))
      '(! "-4.0"))
(test (truncate (! "-4.3"))
      '(truncate (! "-4.3"))
      '(! "-4.0"))
(test (round (! "-4.3"))
      '(round (! "-4.3"))
      '(! "-4.0"))
(test (floor (! "3.5"))
      '(floor (! "3.5"))
      '(! "3.0"))
(test (ceiling (! "3.5"))
      '(ceiling (! "3.5"))
      '(! "4.0"))
(test (truncate (! "3.5"))
      '(truncate (! "3.5"))
      '(! "3.0"))
(test (round (! "3.5"))
      '(round (! "3.5"))
      '(! "4.0") "inexact")

;;(test (round 7/2)
;;      '(round 7/2)
;;      '4 "exact")
(test (round 7)
      '(round 7)
      '7)


(SECTION 6 2 6) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(test (string->number "100")
      '(string->number "100")
      '100)
(test (string->number "#x100")
      '(string->number "#x100")
      '256)
(test (string->number "1e2")
      '(string->number "1e2")
      '(! "100.0"))
#;(if inexact (test (string->number  "15##")
'(string->number  "15##")
'(! "1500.0")))
(test (number->string 100)
      '(number->string 100)
      '"100")
(test (number->string 256 16)
      '(number->string 256 16)
      '"100")
(test (number->string 0)
      '(number->string 0)
      '"0")
(test (string->number "")
      '(string->number "")
      '#f)
(test (string->number ".")
      '(string->number ".")
      '#f)
(test (string->number "d")
      '(string->number "d")
      '#f)
(test (string->number "D")
      '(string->number "D")
      '#f)
(test (string->number "i")
      '(string->number "i")
      '#f)
(test (string->number "I")
      '(string->number "I")
      '#f)
(test (string->number "3i")
      '(string->number "3i")
      '#f)
(test (string->number "3I")
      '(string->number "3I")
      '#f)
(test (string->number "33i")
      '(string->number "33i")
      '#f)
(test (string->number "33I")
      '(string->number "33I")
      '#f)
(test (string->number "3.3i")
      '(string->number "3.3i")
      '#f)
(test (string->number "3.3I")
      '(string->number "3.3I")
      '#f)
(test (string->number "-")
      '(string->number "-")
      '#f)
(test (string->number "+")
      '(string->number "+")
      '#f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (main argv) (report-errors))
