;;(load source "helpers.qa2")
#fload "../lib/libs.sf"
#fload "helpers.sf"

(SECTION 'Qa2 'bitwise 'operations);;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-syntax logand fxand)
(define-syntax logxor fxxor)
(define-syntax logior fxior)
(define-syntax logor fxior)
(define-syntax lognot fxnot)
(define (ash a b)
  (if (< b 0) (fxarithmetic-shift-right a (- b))
      (fxarithmetic-shift-left a b)))

(test (logand -1 -1)
      '(logand -1 -1)
      '-1)
(test (logand -1 0)
      '(logand -1 0)
      '0)
(test (logand 5 3)
      '(logand 5 3)
      '1)
(test (logor -1 -1)
      '(logor -1 -1)
      '-1)
(test (logor -1 0)
      '(logor -1 0)
      '-1)
(test (logor 5 3)
      '(logor 5 3)
      '7)
(test (logxor -1 -1)
      '(logxor -1 -1)
      '0)
(test (logxor -1 0)
      '(logxor -1 0)
      '-1)
(test (logxor 5 3)
      '(logxor 5 3)
      '6)
(test (lognot -2)
      '(lognot -2)
      '1)
(test (lognot -1)
      '(lognot -1)
      '0)
(test (lognot 0)
      '(lognot 0)
      '-1)
(test (lognot 1)
      '(lognot 1)
      '-2)
(test (lognot 2)
      '(lognot 2)
      '-3)

(test (ash 1 2)
      '(ash 1 2)
      '4)
(test (ash -1 2)
      '(ash -1 2)
      '-4)

(test (ash 13 -2)
      '(ash 13 -2)
      '3)
#;(test (ash -1 -3)
      '(ash -1 -3)
      '-1)

(test (ash 4 -2)
      '(ash 4 -2)
      '1)
#;(test (ash -1 -1)
      '(ash -1 -1)
      '-1)
(test (ash 64 -3)
      '(ash 64 -3)
      '8)
#;(test (ash -1 -7)
      '(ash -1 -7)
      '-1)
#;(test (ash -64 -3)
      '(ash -64 -3)
      '-8)


(test (ash -1 7)
      '(ash -1 7)
      '-128)
(test (ash -64 3)
      '(ash -64 3)
      '-512)

(SECTION 'Qa2 'rounding 'operations);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(test (floor (! "-4.3"))
      '(floor (! "-4.3"))
      '(! "-5.0"))
(test (ceiling (! "-4.3"))
      '(ceiling (! "-4.3"))
      '(! "-4.0"))
(test (truncate (! "-4.3"))
      '(truncate (! "-4.3"))
      '(! "-4.0"))
(test (round (! "-4.3"))
      '(round (! "-4.3"))
      '(! "-4.0"))
(test (floor (! "3.5"))
      '(floor (! "3.5"))
      '(! "3.0"))
(test (ceiling (! "3.5"))
      '(ceiling (! "3.5"))
      '(! "4.0"))
(test (truncate (! "3.5"))
      '(truncate (! "3.5"))
      '(! "3.0"))
(test (round (! "3.5"))
      '(round (! "3.5"))
      '(! "4.0"))


(SECTION 'Qa2 'multiple 'values);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(test (let-values ([(a b c) (values 1 2 3)]) (list b c a c))
      '(let-values ([(a b c) (values 1 2 3)]) (list b c a c))
      '(2 3 1 3))
(test (let-values ([(a) (values 123)]) a)
      '(let-values ([(a) (values 123)]) a)
      '123)
(test (let-values ([() (values)]) 'a)
      '(let-values ([() (values)]) 'a)
      'a)

(test (call-with-values (lambda () 1) (lambda (x) (list x x)))
      '(call-with-values (lambda () 1) (lambda (x) (list x x)))
      '(1 1))
(test (call-with-values (lambda () (values 1 2 3)) list)
      '(call-with-values (lambda () (values 1 2 3)) list)
      '(1 2 3))

(SECTION 'Qa2 'top-level 'defines);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(set! foo 'foo)
(test foo
      'foo
      'foo)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (main argv) (report-errors))
