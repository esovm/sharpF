;;(load source "helpers.qa2")
#fload "../lib/libs.sf"
#fload "helpers.sf"


(SECTION 7 1 1) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(test (symbol? 'a)
      '(symbol? 'a)
      '#t "<letter>")
(test (every? symbol? '(! $ % & * / : < = > ? ^ _ ~))
      '(every? symbol? '(! $ % & * / : < = > ? ^ _ ~))
      '#t "<special initial>")
(test (every? symbol? '(!1 $1 %1 &1 *1 /1 :1 <1 =1 >1 ?1 ^1 _1 ~1))
      '(every? symbol? '(!1 $1 %1 &1 *1 /1 :1 <1 =1 >1 ?1 ^1 _1 ~1))
      '#t 
      "<special initial>")
(test (every? symbol? '(+ - ...))
      '(every? symbol? '(+ - ...))
      '#t "<peculiar identifier>")
(test (every? symbol? '(!+ !- !. !@))
      '(every? symbol? '(!+ !- !. !@))
      '#t "<special subsequent>")
(test (every? symbol? '(!.. $.+ %.- &.! *.: /:. :+. <-. =. >. ?. ~. _. ^.))
      '(every? symbol? '(!.. $.+ %.- &.! *.: /:. :+. <-. =. >. ?. ~. _. ^.))
      '#t "jaffrey's tests")

(test (cdr '(1 .2))
      '(cdr '(1 .2))
      '((! "0.2")))
(test (cadr '(1 ... 2))
      '(cadr '(1 ... 2))
      '...)

#;(let ((i -1i))
  (test (string->number "3+4i")
        '(string->number "3+4i")
        (make-rectangular 3 4) '(string->number "3+4i"))
  (test (string->number "3-4i")
        '(string->number "3-4i")
        (make-rectangular 3 -4) '(string->number "3-4i"))
  (test (string->number "3+i")
        '(string->number "3+i")
        (make-rectangular 3 1) '(string->number "3+i"))
  (test (string->number "3-i")
        '(string->number "3-i")
        (make-rectangular 3 -1) '(string->number "3-i"))
  (test (string->number "+3i")
        '(string->number "+3i")
        (* 3 (make-rectangular 0 1)) '(string->number "+3i"))
  (test (string->number "-3i")
        '(string->number "-3i")
        (* -3 (make-rectangular 0 1)) '(string->number "-3i"))
  (test (string->number "+i")
        '(string->number "+i")
        (make-rectangular 0 1) '(string->number "+i"))
  (test (string->number "-i")
        '(string->number "-i")
        (- (make-rectangular 0 1)) '(string->number "-i")))

;; This is SFC-specific
(test (string->number "3/4")
      '(string->number "3/4")
      #f '(string->number "3/4"))
(test (string->number "-3/4")
      '(string->number "-3/4")
      #f '(string->number "-3/4"))

#;(test (string->number "#i3")
      '(string->number "#i3")
      '(! "3.0"))
(test (string->number "#e3.0")
      '(string->number "#e3.0")
      '3)
;; Maybe the following belong elsewhere?
(test (string->number "#b111")
      '(string->number "#b111")
      '7)
(test (string->number "#o111")
      '(string->number "#o111")
      '73)
(test (string->number "#d111")
      '(string->number "#d111")
      '111)
(test (string->number "1.0e2")
      '(string->number "1.0e2")
      '(! "100.0"))
#;(test (string->number "1.0s2")
      '(string->number "1.0s2")
      '(! "100.0"))
#;(test (string->number "1.0f2")
      '(string->number "1.0f2")
      '(! "100.0"))
#;(test (string->number "1.0d2")
      '(string->number "1.0d2")
      '(! "100.0"))
#;(test (string->number "1.0l2")
      '(string->number "1.0l2")
      '(! "100.0"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (main argv) (report-errors))
